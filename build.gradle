plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.8"
    id 'net.neoforged.moddev' version '2.0.76'
    id "me.modmuss50.mod-publish-plugin" version "0.8.3"
}

group = 'dev.ftb.mods'
version = mod_version

base {
    archivesName = mod_id
}

apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/publishing.gradle"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

neoForge {
    version = project.mod_loader_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

     accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.ftb.dev/releases"
        content {
            includeGroup("dev.ftb.mods")
            includeGroup("net.rocketplatform.game.client.mod")
        }
    }
    maven {
        url = "https://maven.architectury.dev"
        content {
            includeGroup("dev.architectury")
        }
    }
}

dependencies {
    implementation "curse.maven:bisecthosting-server-integration-menu-neoforge-1084468:${bisecthosting_version}"

    // Needs to be pulled into the dev env
    implementation "net.rocketplatform.game.client.mod:rgp-client:${ftb_worlds_version}+mc${minecraft_version}"
    runtimeOnly "dev.ftb.mods:ftb-library-neoforge:${ftb_library_version}"

    implementation "curse.maven:fancymenu-367706:${fancy_menu_version}"

    // Deps
    runtimeOnly "curse.maven:konkrete-410295:${fancy_menu_konkrete_version}"
    runtimeOnly "curse.maven:melody-938643:${fancy_menu_melody_version}"
}

processResources {
    var replaceProperties = [
            mod_version: project.version,
            minecraft_version      : project.properties.minecraft_version,
            minecraft_version_range: project.properties.minecraft_version_range,
            neo_version            : project.properties.mod_loader_version,
            neo_version_range      : project.properties.mod_loader_version_range,
            loader_version_range   : project.properties.loader_version_range,
    ]

    inputs.properties replaceProperties

    filesMatching('META-INF/mods.toml') {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }

    repositories {
        if (ftbPublishing.ftbToken) {
            maven {
                url ftbPublishing.ftbURL
                credentials {
                    username = ftbPublishing.ftbUser
                    password = ftbPublishing.ftbToken
                }
            }
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

publishMods {
    def cfToken = providers.environmentVariable("CURSEFORGE_KEY")

    dryRun = !cfToken.isPresent()
    changelog = createChangelog(project)
    version = mod_version
    file = jar.archiveFile
    displayName = "[NEOFORGE] FTB Promoter ${project.version}"
    modLoaders.add("neoforge")

    def tag = providers.environmentVariable("TAG").getOrElse("release")
    type = tag.endsWith("-beta") ? BETA : (tag.endsWith("-alpha") ? ALPHA : STABLE)

    curseforge {
        accessToken = cfToken.isPresent() ? cfToken.get() : ""
        minecraftVersions.add(minecraft_version)

        projectId = curseforge_id

        optional('fancymenu')
        optional('bisecthosting-server-integration-menu-neoforge')
    }
}
